{
  "uid" : "690c09ec2d6a1fb2",
  "name" : "Delete a random person and verify deletion",
  "fullName" : "tests.test_web_tables.TestWebTables#test_delete_person",
  "historyId" : "e2458824731e0f3557a4ca96ca3aeec7",
  "time" : {
    "start" : 1740071463640,
    "stop" : 1740071763646,
    "duration" : 300006
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)",
  "statusTrace" : "self = <test_web_tables.TestWebTables object at 0x7f2f876fb280>\n\n    @allure.title(\"Delete a random person and verify deletion\")\n    @pytest.mark.smoke\n    @pytest.mark.screenshot\n    def test_delete_person(self):\n>       self.web_tables.open()\n\ntests/test_web_tables.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:17: in open\n    self.driver.get(self.PAGE_URL)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2f821fd7e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -0.000\\\\n  (Session info: chrome=132.0.6834.83)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\nE         (Session info: chrome=132.0.6834.83)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1740059423564,
      "stop" : 1740059423652,
      "duration" : 88
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1740071463040,
      "stop" : 1740071463503,
      "duration" : 463
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "setup",
    "time" : {
      "start" : 1740071463503,
      "stop" : 1740071463639,
      "duration" : 136
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)",
    "statusTrace" : "self = <test_web_tables.TestWebTables object at 0x7f2f876fb280>\n\n    @allure.title(\"Delete a random person and verify deletion\")\n    @pytest.mark.smoke\n    @pytest.mark.screenshot\n    def test_delete_person(self):\n>       self.web_tables.open()\n\ntests/test_web_tables.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:17: in open\n    self.driver.get(self.PAGE_URL)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2f821fd7e0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -0.000\\\\n  (Session info: chrome=132.0.6834.83)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\nE         (Session info: chrome=132.0.6834.83)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
    "steps" : [ {
      "name" : "Open https://demoqa.com/webtables page",
      "time" : {
        "start" : 1740071463640,
        "stop" : 1740071763645,
        "duration" : 300005
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)\n\n",
      "statusTrace" : "  File \"/usr/workspace/base/base_page.py\", line 17, in open\n    self.driver.get(self.PAGE_URL)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 363, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "ead278702b253239",
      "name" : "screenshots/test_delete_person_2025-02-20_19-16-03.png",
      "source" : "ead278702b253239.attach",
      "type" : "image/png",
      "size" : 29108
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1740071763911,
      "stop" : 1740071763992,
      "duration" : 81
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Elements - Wev Tables"
  }, {
    "name" : "tag",
    "value" : "screenshot"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_web_tables"
  }, {
    "name" : "subSuite",
    "value" : "TestWebTables"
  }, {
    "name" : "host",
    "value" : "5d8118277ff0"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_web_tables"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 20,
        "unknown" : 0,
        "total" : 21
      },
      "items" : [ {
        "uid" : "95c855e1b9988730",
        "status" : "passed",
        "time" : {
          "start" : 1738401052379,
          "stop" : 1738401065383,
          "duration" : 13004
        }
      }, {
        "uid" : "b5a84992e9fbb014",
        "status" : "passed",
        "time" : {
          "start" : 1738162063893,
          "stop" : 1738162078727,
          "duration" : 14834
        }
      }, {
        "uid" : "eb417c52d8bca1b4",
        "status" : "passed",
        "time" : {
          "start" : 1738147698136,
          "stop" : 1738147707429,
          "duration" : 9293
        }
      }, {
        "uid" : "59ddcdf5154e4bdf",
        "status" : "passed",
        "time" : {
          "start" : 1738075733174,
          "stop" : 1738075753582,
          "duration" : 20408
        }
      }, {
        "uid" : "93073826c8b46a2d",
        "status" : "passed",
        "time" : {
          "start" : 1731658024829,
          "stop" : 1731658035170,
          "duration" : 10341
        }
      }, {
        "uid" : "b1822c35c358eb98",
        "status" : "passed",
        "time" : {
          "start" : 1730874878380,
          "stop" : 1730874887257,
          "duration" : 8877
        }
      }, {
        "uid" : "9e9cdc4ac5ea4bd2",
        "status" : "passed",
        "time" : {
          "start" : 1730836184361,
          "stop" : 1730836188593,
          "duration" : 4232
        }
      }, {
        "uid" : "fc4ff1fd8ac82c07",
        "status" : "passed",
        "time" : {
          "start" : 1730114877315,
          "stop" : 1730114887397,
          "duration" : 10082
        }
      }, {
        "uid" : "7121b373cf56e1ba",
        "status" : "passed",
        "time" : {
          "start" : 1729786160818,
          "stop" : 1729786171613,
          "duration" : 10795
        }
      }, {
        "uid" : "a8cf0858fe9c33c2",
        "status" : "passed",
        "time" : {
          "start" : 1729172163626,
          "stop" : 1729172173751,
          "duration" : 10125
        }
      }, {
        "uid" : "661b81bcd8413688",
        "status" : "passed",
        "time" : {
          "start" : 1728654618226,
          "stop" : 1728654627475,
          "duration" : 9249
        }
      }, {
        "uid" : "225f95eeff614229",
        "status" : "passed",
        "time" : {
          "start" : 1727439989706,
          "stop" : 1727439994409,
          "duration" : 4703
        }
      }, {
        "uid" : "27e323f25e3c9dda",
        "status" : "passed",
        "time" : {
          "start" : 1727433936994,
          "stop" : 1727433946354,
          "duration" : 9360
        }
      }, {
        "uid" : "b357a64dce267ef1",
        "status" : "passed",
        "time" : {
          "start" : 1727167228065,
          "stop" : 1727167232905,
          "duration" : 4840
        }
      }, {
        "uid" : "17850b353ee77ce2",
        "status" : "passed",
        "time" : {
          "start" : 1726735711439,
          "stop" : 1726735721372,
          "duration" : 9933
        }
      }, {
        "uid" : "bf5ead6751cb2740",
        "status" : "passed",
        "time" : {
          "start" : 1726734191667,
          "stop" : 1726734201075,
          "duration" : 9408
        }
      }, {
        "uid" : "4f72f78a48e9f2f5",
        "status" : "passed",
        "time" : {
          "start" : 1726686658121,
          "stop" : 1726686662214,
          "duration" : 4093
        }
      }, {
        "uid" : "988deae18cb4319e",
        "status" : "passed",
        "time" : {
          "start" : 1726564626107,
          "stop" : 1726564635714,
          "duration" : 9607
        }
      }, {
        "uid" : "cbd1b5d98007c9be",
        "status" : "passed",
        "time" : {
          "start" : 1726146077900,
          "stop" : 1726146082401,
          "duration" : 4501
        }
      }, {
        "uid" : "f365695428db8deb",
        "status" : "passed",
        "time" : {
          "start" : 1726040844394,
          "stop" : 1726040856311,
          "duration" : 11917
        }
      } ]
    },
    "tags" : [ "smoke", "screenshot" ]
  },
  "source" : "690c09ec2d6a1fb2.json",
  "parameterValues" : [ ]
}