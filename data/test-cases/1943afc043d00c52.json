{
  "uid" : "1943afc043d00c52",
  "name" : "Click on the checkboxes",
  "fullName" : "tests.test_check_box.TestCheckBox#test_click_check_box",
  "historyId" : "ac46f10f1fffab8a28c9e0f981a7ac87",
  "time" : {
    "start" : 1740064240024,
    "stop" : 1740064540030,
    "duration" : 300006
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)",
  "statusTrace" : "self = <test_check_box.TestCheckBox object at 0x7f2f87781600>\n\n    @allure.title(\"Click on the checkboxes\")\n    @pytest.mark.smoke\n    @pytest.mark.screenshot\n    def test_click_check_box(self):\n>       self.check_box.open()\n\ntests/test_check_box.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:17: in open\n    self.driver.get(self.PAGE_URL)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2f862d46d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -0.000\\\\n  (Session info: chrome=132.0.6834.83)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\nE         (Session info: chrome=132.0.6834.83)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1740059423564,
      "stop" : 1740059423652,
      "duration" : 88
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "setup",
    "time" : {
      "start" : 1740064239884,
      "stop" : 1740064240023,
      "duration" : 139
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1740064239411,
      "stop" : 1740064239884,
      "duration" : 473
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)",
    "statusTrace" : "self = <test_check_box.TestCheckBox object at 0x7f2f87781600>\n\n    @allure.title(\"Click on the checkboxes\")\n    @pytest.mark.smoke\n    @pytest.mark.screenshot\n    def test_click_check_box(self):\n>       self.check_box.open()\n\ntests/test_check_box.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:17: in open\n    self.driver.get(self.PAGE_URL)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2f862d46d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -0.000\\\\n  (Session info: chrome=132.0.6834.83)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\nE         (Session info: chrome=132.0.6834.83)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
    "steps" : [ {
      "name" : "Open https://demoqa.com/checkbox page",
      "time" : {
        "start" : 1740064240024,
        "stop" : 1740064540030,
        "duration" : 300006
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)\n\n",
      "statusTrace" : "  File \"/usr/workspace/base/base_page.py\", line 17, in open\n    self.driver.get(self.PAGE_URL)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 363, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "90ac3fe41c4b8abc",
      "name" : "screenshots/test_click_check_box_2025-02-20_17-15-40.png",
      "source" : "90ac3fe41c4b8abc.attach",
      "type" : "image/png",
      "size" : 29108
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1740064540301,
      "stop" : 1740064540380,
      "duration" : 79
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Elements - Check Box"
  }, {
    "name" : "tag",
    "value" : "screenshot"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_check_box"
  }, {
    "name" : "subSuite",
    "value" : "TestCheckBox"
  }, {
    "name" : "host",
    "value" : "5d8118277ff0"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_check_box"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 31,
        "unknown" : 0,
        "total" : 33
      },
      "items" : [ {
        "uid" : "6e8d90e7302ee894",
        "status" : "passed",
        "time" : {
          "start" : 1738400755067,
          "stop" : 1738400769473,
          "duration" : 14406
        }
      }, {
        "uid" : "f6c3db66882b35f0",
        "status" : "passed",
        "time" : {
          "start" : 1738161845084,
          "stop" : 1738161860158,
          "duration" : 15074
        }
      }, {
        "uid" : "326400e4f78df21b",
        "status" : "passed",
        "time" : {
          "start" : 1738147217916,
          "stop" : 1738147226594,
          "duration" : 8678
        }
      }, {
        "uid" : "d192b967381ce498",
        "status" : "passed",
        "time" : {
          "start" : 1738075508379,
          "stop" : 1738075518921,
          "duration" : 10542
        }
      }, {
        "uid" : "618306e6d3c22408",
        "status" : "passed",
        "time" : {
          "start" : 1731657581676,
          "stop" : 1731657589992,
          "duration" : 8316
        }
      }, {
        "uid" : "3f48e96119a5b5",
        "status" : "passed",
        "time" : {
          "start" : 1730874679373,
          "stop" : 1730874687955,
          "duration" : 8582
        }
      }, {
        "uid" : "d368fbab738df5f9",
        "status" : "passed",
        "time" : {
          "start" : 1730835488412,
          "stop" : 1730835633635,
          "duration" : 145223
        }
      }, {
        "uid" : "11f02f2359743754",
        "status" : "passed",
        "time" : {
          "start" : 1730114701303,
          "stop" : 1730114709544,
          "duration" : 8241
        }
      }, {
        "uid" : "efa7196302400941",
        "status" : "passed",
        "time" : {
          "start" : 1729785957550,
          "stop" : 1729785966195,
          "duration" : 8645
        }
      }, {
        "uid" : "5469ead438ccfdec",
        "status" : "passed",
        "time" : {
          "start" : 1729171983383,
          "stop" : 1729171993630,
          "duration" : 10247
        }
      }, {
        "uid" : "ca8eb2b0333ff36a",
        "status" : "passed",
        "time" : {
          "start" : 1728654466312,
          "stop" : 1728654475859,
          "duration" : 9547
        }
      }, {
        "uid" : "7ea86c9897d9e104",
        "status" : "passed",
        "time" : {
          "start" : 1727439871294,
          "stop" : 1727439879835,
          "duration" : 8541
        }
      }, {
        "uid" : "7abd132809f3a68e",
        "status" : "passed",
        "time" : {
          "start" : 1727433802278,
          "stop" : 1727433811155,
          "duration" : 8877
        }
      }, {
        "uid" : "feea864a08913963",
        "status" : "passed",
        "time" : {
          "start" : 1727167112278,
          "stop" : 1727167120993,
          "duration" : 8715
        }
      }, {
        "uid" : "7788d8120b538252",
        "status" : "passed",
        "time" : {
          "start" : 1726735590939,
          "stop" : 1726735600059,
          "duration" : 9120
        }
      }, {
        "uid" : "4b8710638776874b",
        "status" : "passed",
        "time" : {
          "start" : 1726734086822,
          "stop" : 1726734090775,
          "duration" : 3953
        }
      }, {
        "uid" : "9b64a93f91dd39ef",
        "status" : "passed",
        "time" : {
          "start" : 1726686359474,
          "stop" : 1726686371886,
          "duration" : 12412
        }
      }, {
        "uid" : "bc7f3920bde73628",
        "status" : "passed",
        "time" : {
          "start" : 1726564509592,
          "stop" : 1726564518335,
          "duration" : 8743
        }
      }, {
        "uid" : "5db869438f157447",
        "status" : "passed",
        "time" : {
          "start" : 1726146020823,
          "stop" : 1726146030461,
          "duration" : 9638
        }
      }, {
        "uid" : "fd2e375439bb42bf",
        "status" : "passed",
        "time" : {
          "start" : 1726040790060,
          "stop" : 1726040794705,
          "duration" : 4645
        }
      } ]
    },
    "tags" : [ "smoke", "screenshot" ]
  },
  "source" : "1943afc043d00c52.json",
  "parameterValues" : [ ]
}