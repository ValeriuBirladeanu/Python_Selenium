{
  "uid" : "2e724b702b7d01eb",
  "name" : "Select and verify a random radio button",
  "fullName" : "tests.test_radio_button.TestRadioButton#test_random_radio_button",
  "historyId" : "5c0a7aed3709908479f7d51ec7f394fc",
  "time" : {
    "start" : 1740069055652,
    "stop" : 1740069355658,
    "duration" : 300006
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)",
  "statusTrace" : "self = <test_radio_button.TestRadioButton object at 0x7f2f87786530>\n\n    @allure.title(\"Select and verify a random radio button\")\n    @pytest.mark.smoke\n    @pytest.mark.screenshot\n    def test_random_radio_button(self):\n>       self.radio_button.open()\n\ntests/test_radio_button.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:17: in open\n    self.driver.get(self.PAGE_URL)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2f860a0a90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -0.000\\\\n  (Session info: chrome=132.0.6834.83)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\nE         (Session info: chrome=132.0.6834.83)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1740059423564,
      "stop" : 1740059423652,
      "duration" : 88
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1740069055037,
      "stop" : 1740069055506,
      "duration" : 469
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "setup",
    "time" : {
      "start" : 1740069055506,
      "stop" : 1740069055652,
      "duration" : 146
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)",
    "statusTrace" : "self = <test_radio_button.TestRadioButton object at 0x7f2f87786530>\n\n    @allure.title(\"Select and verify a random radio button\")\n    @pytest.mark.smoke\n    @pytest.mark.screenshot\n    def test_random_radio_button(self):\n>       self.radio_button.open()\n\ntests/test_radio_button.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:17: in open\n    self.driver.get(self.PAGE_URL)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2f860a0a90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -0.000\\\\n  (Session info: chrome=132.0.6834.83)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\nE         (Session info: chrome=132.0.6834.83)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
    "steps" : [ {
      "name" : "Open https://demoqa.com/radio-button page",
      "time" : {
        "start" : 1740069055652,
        "stop" : 1740069355658,
        "duration" : 300006
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)\n\n",
      "statusTrace" : "  File \"/usr/workspace/base/base_page.py\", line 17, in open\n    self.driver.get(self.PAGE_URL)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 363, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "3f8728da4a780e25",
      "name" : "screenshots/test_random_radio_button_2025-02-20_18-35-55.png",
      "source" : "3f8728da4a780e25.attach",
      "type" : "image/png",
      "size" : 29108
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1740069355927,
      "stop" : 1740069356007,
      "duration" : 80
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Elements - Radio Button"
  }, {
    "name" : "tag",
    "value" : "screenshot"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_radio_button"
  }, {
    "name" : "subSuite",
    "value" : "TestRadioButton"
  }, {
    "name" : "host",
    "value" : "5d8118277ff0"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_radio_button"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 2,
        "skipped" : 0,
        "passed" : 27,
        "unknown" : 0,
        "total" : 29
      },
      "items" : [ {
        "uid" : "5679f75d688c752",
        "status" : "passed",
        "time" : {
          "start" : 1738400952250,
          "stop" : 1738400964118,
          "duration" : 11868
        }
      }, {
        "uid" : "82e4f0f3c7761882",
        "status" : "passed",
        "time" : {
          "start" : 1738162007857,
          "stop" : 1738162021192,
          "duration" : 13335
        }
      }, {
        "uid" : "1c6f2a938ac1a08",
        "status" : "passed",
        "time" : {
          "start" : 1738147629953,
          "stop" : 1738147632497,
          "duration" : 2544
        }
      }, {
        "uid" : "82dbd5c500d492d3",
        "status" : "passed",
        "time" : {
          "start" : 1738075664967,
          "stop" : 1738075667993,
          "duration" : 3026
        }
      }, {
        "uid" : "6b3d496aff50f81c",
        "status" : "passed",
        "time" : {
          "start" : 1731657844271,
          "stop" : 1731657981158,
          "duration" : 136887
        }
      }, {
        "uid" : "9ad771a3bdc89f18",
        "status" : "passed",
        "time" : {
          "start" : 1730874821682,
          "stop" : 1730874823989,
          "duration" : 2307
        }
      }, {
        "uid" : "48d093cec60afc14",
        "status" : "passed",
        "time" : {
          "start" : 1730835990644,
          "stop" : 1730835993018,
          "duration" : 2374
        }
      }, {
        "uid" : "d40357e69c03be10",
        "status" : "passed",
        "time" : {
          "start" : 1730114817001,
          "stop" : 1730114825271,
          "duration" : 8270
        }
      }, {
        "uid" : "7a772424b71396a",
        "status" : "passed",
        "time" : {
          "start" : 1729786072769,
          "stop" : 1729786079817,
          "duration" : 7048
        }
      }, {
        "uid" : "5ee1faa346f90f98",
        "status" : "passed",
        "time" : {
          "start" : 1729172118582,
          "stop" : 1729172121077,
          "duration" : 2495
        }
      }, {
        "uid" : "374589d92bbaefed",
        "status" : "passed",
        "time" : {
          "start" : 1728654568884,
          "stop" : 1728654571932,
          "duration" : 3048
        }
      }, {
        "uid" : "91a8ca7244a843a7",
        "status" : "passed",
        "time" : {
          "start" : 1727439941979,
          "stop" : 1727439949337,
          "duration" : 7358
        }
      }, {
        "uid" : "748570295b76e713",
        "status" : "passed",
        "time" : {
          "start" : 1727433877253,
          "stop" : 1727433884699,
          "duration" : 7446
        }
      }, {
        "uid" : "56ff531d8f219154",
        "status" : "passed",
        "time" : {
          "start" : 1727167181775,
          "stop" : 1727167189349,
          "duration" : 7574
        }
      }, {
        "uid" : "1335fc9534781d69",
        "status" : "passed",
        "time" : {
          "start" : 1726735666761,
          "stop" : 1726735669673,
          "duration" : 2912
        }
      }, {
        "uid" : "d0dd9b101762ad23",
        "status" : "passed",
        "time" : {
          "start" : 1726734145521,
          "stop" : 1726734153107,
          "duration" : 7586
        }
      }, {
        "uid" : "5b94a175995d636d",
        "status" : "passed",
        "time" : {
          "start" : 1726686608127,
          "stop" : 1726686618421,
          "duration" : 10294
        }
      }, {
        "uid" : "f7f7977fdfe7b0cc",
        "status" : "passed",
        "time" : {
          "start" : 1726564584977,
          "stop" : 1726564592506,
          "duration" : 7529
        }
      }, {
        "uid" : "d4d95b086e70ab2e",
        "status" : "passed",
        "time" : {
          "start" : 1726146030900,
          "stop" : 1726146039578,
          "duration" : 8678
        }
      }, {
        "uid" : "96fb00d07f358b15",
        "status" : "passed",
        "time" : {
          "start" : 1726040795223,
          "stop" : 1726040802742,
          "duration" : 7519
        }
      } ]
    },
    "tags" : [ "smoke", "screenshot" ]
  },
  "source" : "2e724b702b7d01eb.json",
  "parameterValues" : [ ]
}