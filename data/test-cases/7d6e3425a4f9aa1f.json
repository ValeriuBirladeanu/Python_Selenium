{
  "uid" : "7d6e3425a4f9aa1f",
  "name" : "A click",
  "fullName" : "tests.test_buttons.TestButtons#test_click_button",
  "historyId" : "ebdb25f36711577e39bac23b3da2e50f",
  "time" : {
    "start" : 1740063939049,
    "stop" : 1740064239055,
    "duration" : 300006
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)",
  "statusTrace" : "self = <test_buttons.TestButtons object at 0x7f2f87781f60>\n\n    @allure.title(\"A click\")\n    @pytest.mark.smoke\n    @pytest.mark.screenshot\n    def test_click_button(self):\n>       self.buttons.open()\n\ntests/test_buttons.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:17: in open\n    self.driver.get(self.PAGE_URL)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2f820edf30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -0.000\\\\n  (Session info: chrome=132.0.6834.83)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\nE         (Session info: chrome=132.0.6834.83)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1740059423564,
      "stop" : 1740059423652,
      "duration" : 88
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1740063938442,
      "stop" : 1740063938916,
      "duration" : 474
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "setup",
    "time" : {
      "start" : 1740063938917,
      "stop" : 1740063939048,
      "duration" : 131
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)",
    "statusTrace" : "self = <test_buttons.TestButtons object at 0x7f2f87781f60>\n\n    @allure.title(\"A click\")\n    @pytest.mark.smoke\n    @pytest.mark.screenshot\n    def test_click_button(self):\n>       self.buttons.open()\n\ntests/test_buttons.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/base_page.py:17: in open\n    self.driver.get(self.PAGE_URL)\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2f820edf30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: -0.000\\\\n  (Session info: chrome=132.0.6834.83)\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\nE         (Session info: chrome=132.0.6834.83)\n\n../local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException",
    "steps" : [ {
      "name" : "Open https://demoqa.com/buttons page",
      "time" : {
        "start" : 1740063939049,
        "stop" : 1740064239055,
        "duration" : 300006
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: -0.000\n  (Session info: chrome=132.0.6834.83)\n\n",
      "statusTrace" : "  File \"/usr/workspace/base/base_page.py\", line 17, in open\n    self.driver.get(self.PAGE_URL)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 363, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "4f93fe520d38217",
      "name" : "screenshots/test_click_button_2025-02-20_17-10-39.png",
      "source" : "4f93fe520d38217.attach",
      "type" : "image/png",
      "size" : 29108
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1740064239329,
      "stop" : 1740064239409,
      "duration" : 80
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Elements - Buttons"
  }, {
    "name" : "tag",
    "value" : "screenshot"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_buttons"
  }, {
    "name" : "subSuite",
    "value" : "TestButtons"
  }, {
    "name" : "host",
    "value" : "5d8118277ff0"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_buttons"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 1,
        "skipped" : 0,
        "passed" : 19,
        "unknown" : 0,
        "total" : 20
      },
      "items" : [ {
        "uid" : "a79c60c2f4c99f2e",
        "status" : "passed",
        "time" : {
          "start" : 1738400742236,
          "stop" : 1738400753893,
          "duration" : 11657
        }
      }, {
        "uid" : "caec1b053636e538",
        "status" : "passed",
        "time" : {
          "start" : 1738161831151,
          "stop" : 1738161844415,
          "duration" : 13264
        }
      }, {
        "uid" : "dc2e7e1329c24d2",
        "status" : "passed",
        "time" : {
          "start" : 1738147210211,
          "stop" : 1738147217452,
          "duration" : 7241
        }
      }, {
        "uid" : "df91bb2ca2a4ff20",
        "status" : "passed",
        "time" : {
          "start" : 1738075505228,
          "stop" : 1738075507917,
          "duration" : 2689
        }
      }, {
        "uid" : "5ce65d1ab0f6ad53",
        "status" : "passed",
        "time" : {
          "start" : 1731657574145,
          "stop" : 1731657581187,
          "duration" : 7042
        }
      }, {
        "uid" : "3ed55df8fd6a413d",
        "status" : "passed",
        "time" : {
          "start" : 1730874669610,
          "stop" : 1730874678892,
          "duration" : 9282
        }
      }, {
        "uid" : "64db0daec7ab4f84",
        "status" : "passed",
        "time" : {
          "start" : 1730835486018,
          "stop" : 1730835487927,
          "duration" : 1909
        }
      }, {
        "uid" : "7426983f53ea3c59",
        "status" : "passed",
        "time" : {
          "start" : 1730114692712,
          "stop" : 1730114700822,
          "duration" : 8110
        }
      }, {
        "uid" : "8884226921fb823",
        "status" : "passed",
        "time" : {
          "start" : 1729785949808,
          "stop" : 1729785957083,
          "duration" : 7275
        }
      }, {
        "uid" : "60784e94fa0552ef",
        "status" : "passed",
        "time" : {
          "start" : 1729171975306,
          "stop" : 1729171982923,
          "duration" : 7617
        }
      }, {
        "uid" : "93921b129c5a384b",
        "status" : "passed",
        "time" : {
          "start" : 1728654458691,
          "stop" : 1728654465846,
          "duration" : 7155
        }
      }, {
        "uid" : "e1e0c9b962ac3893",
        "status" : "passed",
        "time" : {
          "start" : 1727439863608,
          "stop" : 1727439870847,
          "duration" : 7239
        }
      }, {
        "uid" : "f73bb3844308a7f9",
        "status" : "passed",
        "time" : {
          "start" : 1727433794449,
          "stop" : 1727433801845,
          "duration" : 7396
        }
      }, {
        "uid" : "ec2ee66666f99e88",
        "status" : "passed",
        "time" : {
          "start" : 1727167104361,
          "stop" : 1727167111844,
          "duration" : 7483
        }
      }, {
        "uid" : "6617098bed83ab6c",
        "status" : "passed",
        "time" : {
          "start" : 1726735582555,
          "stop" : 1726735590514,
          "duration" : 7959
        }
      }, {
        "uid" : "8b71e8edd2dcaa07",
        "status" : "passed",
        "time" : {
          "start" : 1726734078707,
          "stop" : 1726734086388,
          "duration" : 7681
        }
      }, {
        "uid" : "4a98ae0535001250",
        "status" : "passed",
        "time" : {
          "start" : 1726686221646,
          "stop" : 1726686359032,
          "duration" : 137386
        }
      }, {
        "uid" : "96fcaef261081458",
        "status" : "passed",
        "time" : {
          "start" : 1726564506878,
          "stop" : 1726564509155,
          "duration" : 2277
        }
      }, {
        "uid" : "6ee0e0efb039237a",
        "status" : "passed",
        "time" : {
          "start" : 1726146018623,
          "stop" : 1726146020383,
          "duration" : 1760
        }
      } ]
    },
    "tags" : [ "smoke", "screenshot" ]
  },
  "source" : "7d6e3425a4f9aa1f.json",
  "parameterValues" : [ ]
}